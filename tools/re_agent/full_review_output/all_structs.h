/* Auto-generated struct definitions */
/* Generated by MIPS RE Agent */

#ifndef OPENIMP_STRUCTS_H
#define OPENIMP_STRUCTS_H

#include <stdint.h>
#include <pthread.h>
#include <semaphore.h>

typedef struct {
    int system_initialized; // Offset 0x00
    uint64_t timestamp_base; // Offset 0x08
    Module g_modules[NUM_MODULES]; // Offset 0x10
    pthread_mutex_t system_mutex; // Offset 0x20
} IMP_System;

// Assuming NUM_MODULES and Module are defined elsewhere

typedef struct {
    int system_initialized; // Offset 0x00
    Module g_modules[NUM_MODULES]; // Offset 0x10
    pthread_mutex_t system_mutex; // Offset 0x20
} IMP_System;

// Assuming NUM_MODULES and Module are defined elsewhere

typedef struct {
    int cell_id; // Unique identifier for the cell
    int module_id; // Identifier for the module this cell belongs to
    int port_id; // Port identifier within the module
} IMPCell;

// Assuming the structure of IMPCell is defined based on typical usage patterns

typedef struct {
    int deviceID; // Offset 0x00
    int groupID;  // Offset 0x04
    int outputID; // Offset 0x08
} IMPCell;

typedef struct {
    int (*unbind_func)(void*, void*, void*); // Offset 0x128
    // Other members of Module struct
} Module;

// Assuming other necessary members and functions are defined elsewhere

typedef struct {
    char aVersion[VERSION_STRING_SIZE]; // Offset 0x00
} IMPVersion;

// Assuming VERSION_STRING_SIZE is defined elsewhere to accommodate the version string

typedef struct {
    char dev_name[DEV_NAME_SIZE]; // Offset 0x00
    int fd;                       // Offset 0x20
    int tisp_fd;                  // Offset 0x24
    int opened;                   // Offset 0x28
} ISPDevice;

// Assuming DEV_NAME_SIZE is defined elsewhere to accommodate the device name

typedef struct {
    int fd;                       // Offset 0x20
    int tisp_fd;                  // Offset 0x24
    int opened;                   // Offset 0x28
    uintptr_t isp_buffer_phys;    // Offset 0x2C
    void *isp_buffer_virt;        // Offset 0x30
    size_t isp_buffer_size;       // Offset 0x34
    uintptr_t isp_buffer2_phys;   // Offset 0x38
    void *isp_buffer2_virt;       // Offset 0x3C
    size_t isp_buffer2_size;      // Offset 0x40
} ISPDevice;

// Assuming other necessary members and functions are defined elsewhere

typedef struct {
    char name[32];          // Offset 0x00
    int reserved1;          // Offset 0x20
    int cbus_type;          // Offset 0x24
    char i2c_type[16];      // Offset 0x28
    int i2c_addr;           // Offset 0x38
    int i2c_adapter;        // Offset 0x3C
    int rst_gpio;           // Offset 0x40
    int pwdn_gpio;          // Offset 0x44
    int power_gpio;         // Offset 0x48
    int sensor_id;          // Offset 0x4C
} IMPSensorInfo;

// Assuming other necessary members and functions are defined elsewhere

typedef struct {
    char name[32];          // Offset 0x00
    // Other members of IMPSensorInfo are assumed to be defined elsewhere
} IMPSensorInfo;

typedef struct {
    int fd;                       // Offset 0x20
    int opened;                   // Offset 0x28
    // Other members of ISPDevice are assumed to be defined elsewhere
} ISPDevice;

typedef struct {
    // No specific struct members are used in the provided code
    // Assuming other necessary members and functions are defined elsewhere
} ISPDevice;

typedef struct {
    // No specific struct members are used in the provided code
    // Assuming other necessary members and functions are defined elsewhere
} ISPDevice;

typedef struct {
    unsigned char contrast_byte; // Offset 0x00
    // Other members of Tuning are assumed to be defined elsewhere
} Tuning;

typedef struct {
    // Other members of ISPDevice
    Tuning *tuning;              // Offset 0x50
} ISPDevice;

typedef struct {
    // No specific struct members are used in the provided code
    // Assuming other necessary members and functions are defined elsewhere
} ISPDevice;

typedef struct {
    // No specific struct members are used in the provided code
    // Assuming other necessary members and functions are defined elsewhere
} ISPDevice;

typedef struct {
    // No specific struct members are used in the provided code
    // Assuming other necessary members and functions are defined elsewhere
} ISPDevice;

typedef struct {
    // No specific struct members are used in the provided code
    // Assuming other necessary members and functions are defined elsewhere
} ISPDevice;

typedef struct {
    // No specific struct members are used in the provided code
    // Assuming other necessary members and functions are defined elsewhere
} ISPDevice;

typedef struct {
    // No specific struct members are used in the provided code
    // Assuming other necessary members and functions are defined elsewhere
} ISPDevice;

typedef struct {
    int group_id;   // Offset 0x00
    int enabled;    // Offset 0x04
    // Other members of OSDGroup are assumed to be defined elsewhere
} OSDGroup;

typedef struct {
    uint32_t output_count; // Offset 0x134
    void *update_callback; // Offset 0x4c
    // Other members of Module are assumed to be defined elsewhere
} Module;

typedef struct {
    int allocated;  // Offset 0x00
    int registered; // Offset 0x04
    // Other members of OSDRegion are assumed to be defined elsewhere
} OSDRegion;

typedef struct {
    OSDGroup *group_ptrs[MAX_OSD_GROUPS];
    OSDRegion regions[MAX_OSD_REGIONS];
    // Other members of gosd are assumed to be defined elsewhere
} OSDSystem;

typedef struct {
    int allocated;          // Offset 0x00
    int registered;         // Offset 0x04
    uint32_t attributes[9]; // Offset 0x0C
    OSDRegion *next;        // Offset 0x44
    OSDRegion *prev;        // Offset 0x48
    // Other members of OSDRegion are assumed to be defined elsewhere
} OSDRegion;

typedef struct {
    OSDRegion regions[MAX_OSD_REGIONS];
    sem_t sem;
    // Other members of gosd are assumed to be defined elsewhere
} OSDSystem;

typedef struct {
    int pos_x;   // Offset 0x00
    int pos_y;   // Offset 0x04
    int width;   // Offset 0x08
    int height;  // Offset 0x0C
    int color;   // Offset 0x10
    // Other members of IMPOSDRgnAttr are assumed to be defined elsewhere
} IMPOSDRgnAttr;

typedef struct {
    IMPOSDRgnAttr attr;  // Region attributes
    // Other members of OSDRegion are assumed to be defined elsewhere
} OSDRegion;

typedef struct {
    int pos_x;   // Offset 0x00
    int pos_y;   // Offset 0x04
    int width;   // Offset 0x08
    int height;  // Offset 0x0C
    int color;   // Offset 0x10
    // Other members of IMPOSDRgnAttr are assumed to be defined elsewhere
} IMPOSDRgnAttr;

typedef struct {
    IMPOSDRgnAttr attr;  // Region attributes
    // Other members of OSDRegion are assumed to be defined elsewhere
} OSDRegion;

typedef struct {
    int allocated;          // Offset 0x00
    int registered;         // Offset 0x04
    int show_flag;          // Offset 0x08
    // Other members of OSDRegion are assumed to be defined elsewhere
} OSDRegion;

typedef struct {
    OSDRegion regions[MAX_OSD_REGIONS];
    // Other members of gosd are assumed to be defined elsewhere
} OSDSystem;

typedef struct {
    // No specific struct members are used in the provided code
    // Assuming other necessary members and functions are defined elsewhere
} IVSModule;

// Assuming g_ivs_groups is an array of pointers to IVSModule
IVSModule *g_ivs_groups[MAX_IVS_GROUPS];

typedef struct {
    int chn_id;               // Offset 0x00
    int grp_id;               // Offset 0x04
    int running;              // Offset 0x08
    IMPIVSInterface *iface;   // Offset 0x0C
    sem_t sem_frame;          // Offset 0x10
    sem_t sem_lock;           // Offset 0x20
    sem_t sem_result;         // Offset 0x30
    pthread_t thread;         // Offset 0x40
    // Other members of IVSChn are assumed to be defined elsewhere
} IVSChn;

typedef struct {
    int (*init)(IMPIVSInterface*);
    int (*exit)(IMPIVSInterface*);
    int (*process)(void*, void*);
    int (*cb6)(void*, void*);
    // Other members of IMPIVSInterface are assumed to be defined elsewhere
} IMPIVSInterface;

#endif /* OPENIMP_STRUCTS_H */
